package rgbvsu.engine.ai;

import java.util.Random;
import rgbvsu.engine.objects.Block;
import rgbvsu.engine.objects.GameObject;
import rgbvsu.engine.objects.Player;
import rgbvsu.engine.objects.StupidDroid;

/**
 *
 * @author Robin Horneman
 */
public class StupidDroidAI extends AI {

    private int AItime = 100;
    private int state = 0;
    private int speed = 1;
    private int destinationX = (int) getGameObject().getX();
    private int destinationY = (int) getGameObject().getY();
    private Random generator = new Random();

    public StupidDroidAI(StupidDroid droid) {
        super(droid);
        droid.setAI(this);
    }

    @Override
    public void collisionResponse(GameObject otherobj) {
        if (otherobj instanceof Block || otherobj instanceof Player) {
            revertTick();
            AITick();
        }
    }

    @Override
    public void update(long time) {
        GameObject owner = getGameObject();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();

        System.out.println("ownerx: " + (int) owner.getX() + " ownery: " + (int) owner.getY());
        System.out.println("destX: " + destinationX + " destY: " + destinationY);
        if (owner.getX() == destinationX && owner.getY() == destinationY) {
            AITick();
        }

        if ((int) ownerx != destinationX) {
            owner.setX(ownerx + (Math.signum(destinationX - ownerx)));
        }
        if ((int) ownery != destinationY) {
            owner.setY(ownery + (Math.signum(destinationY - ownery)));
        }
    }

    private void AITick() {
        System.out.println("AI-tick!");
        GameObject owner = getGameObject();
        GameObject player = owner.getWorld().getPlayer();
        int playerx = (int) player.getX();
        int playery = (int) player.getY();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();




        //Walk aimlessly


        //Choose a direction
        int randomIndex = generator.nextInt(4);
        if (randomIndex == 0) {//LEFT                        
            destinationX -= owner.getWorld().getCellWidth();
            owner.setFacing(-1,0);
            if (destinationX < 0) {
                destinationX = 0;
            }
        } else if (randomIndex == 1) {//Up
            destinationY -= owner.getWorld().getCellHeight();
            owner.setFacing(0,-1);
            if (destinationY < 0) {
                destinationY = 0;
            }
        } else if (randomIndex == 2) {//RIGHT
            destinationX += owner.getWorld().getCellWidth();
            owner.setFacing(1,0);
            if (destinationX > owner.getWorld().getWidth()) {
                destinationX = owner.getWorld().getWidth();
            }
        } else {                   //DOWN
            destinationY += owner.getWorld().getCellHeight();
            owner.setFacing(0,1);
            if (destinationY > owner.getWorld().getHeight()) {
                destinationY = owner.getWorld().getHeight();
            }
        }


    }

    private void revertTick() {
        GameObject owner = getGameObject();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        if (ownerx < destinationX) {
            owner.setX(ownerx - 1);
        } else if (ownerx > destinationX) {
            owner.setX(ownerx + 1);
        }
        if (ownery > destinationY) {
            owner.setY(ownery + 1);
        } else if (ownery < destinationY) {
            owner.setY(ownery - 1);
        }

    }
}
