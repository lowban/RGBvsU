package rgbvsu.engine.ai;

import java.util.ArrayList;
import java.util.Random;
import rgbvsu.engine.Room;
import rgbvsu.engine.World;
import rgbvsu.engine.objects.BasicDroid;
import rgbvsu.engine.objects.Block;
import rgbvsu.engine.objects.GameObject;
import rgbvsu.engine.objects.Player;

public class BasicDroidAI extends AI {

    private int AItime = 100;
    private int state = 0;
    private int speed = 1;
    private int destinationX = (int) getGameObject().getX();
    private int destinationY = (int) getGameObject().getY();
    private Random generator = new Random();

    public BasicDroidAI(BasicDroid droid) {
        super(droid);
        droid.setAI(this);
    }

    @Override
    public void collisionResponse(GameObject otherobj) {
         if(otherobj instanceof Block || otherobj instanceof Player){
            System.out.println("I revert!");
            revertTick(); 
            AITick();
         }
    }

    @Override
    public void update(long time) {
        GameObject owner = getGameObject();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        
        if (owner.getX() == destinationX && owner.getY() == destinationY) {
            AITick();
        }

        if((int)ownerx!=destinationX){
            owner.setX(ownerx + (Math.signum(destinationX - ownerx)));
        }
        if((int)ownery!=destinationY){
            owner.setY(ownery + (Math.signum( destinationY-ownery)));
        }
    }

    private void AITick() {
        System.out.println("AI-tick!");
        GameObject owner = getGameObject();
        GameObject player = owner.getWorld().getPlayer();
        int playerx = (int) player.getX();
        int playery = (int) player.getY();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();


        //Choose state
        if (isSeen()) {
            state = 1; //Seen
        } else {
            state = 0;
        }

        if (state == 0) { //Walk aimlessly
            System.out.println("Walk aimlessly!");


            //Choose a direction
            int randomIndex = generator.nextInt(4);
            if (randomIndex == 0) {//LEFT                        
                destinationX -= owner.getWorld().getCellWidth();
                if (destinationX < 0) {
                    destinationX = 0;
                }
            } else if (randomIndex == 1) {//Up
                destinationY -= owner.getWorld().getCellHeight();
                if (destinationY < 0) {
                    destinationY = 0;
                }
            } else if (randomIndex == 2) {//RIGHT
                destinationX += owner.getWorld().getCellWidth();
                if (destinationX > owner.getWorld().getWidth()) {
                    destinationX = owner.getWorld().getWidth();
                }
            } else {                   //DOWN
                destinationY += owner.getWorld().getCellHeight();
                if (destinationY > owner.getWorld().getHeight()) {
                    destinationY = owner.getWorld().getHeight();
                }
            }

        } else {  //CHASE 
            System.out.println("CHASE");
            if(playerx<ownerx){
                destinationX -=owner.getWorld().getCellWidth();
            }
            else if(playerx>ownerx){
                destinationX +=owner.getWorld().getCellWidth();
            }
            if(playery<ownery){
                destinationY -= owner.getWorld().getCellHeight();
            }
            else if(playery>ownery){
                destinationY += owner.getWorld().getCellHeight();
            }
        }

    }

    private void revertTick() {
        GameObject owner = getGameObject();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        if(ownerx<destinationX){
            owner.setX(ownerx-1);
        }
        else if(ownerx>destinationX){
            owner.setX(ownerx+1);
        }
        if(ownery>destinationY){
            owner.setY(ownery+1);
        }
        else if(ownery<destinationY){
            owner.setY(ownery-1);
        }
        
    }
    
    private boolean isSeen() {
        GameObject owner = getGameObject();
        World world = owner.getWorld();
        Room room = world.getCurrentRoom();
        GameObject player = world.getPlayer();
        int playerx = (int) player.getX();
        int playery = (int) player.getY();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        int numberOfItemsBetween;
        
        //If in line of sight at all
        if((playerx + player.getWidth() > ownerx && playerx < ownerx + owner.getWidth())
                || (playery + player.getHeight() > ownery && playery < ownery + owner.getHeight())){
            System.out.println("Might be seen");
            //If horizontally aligned
            if((playerx + player.getWidth() > ownerx && playerx < ownerx + owner.getWidth())){
                System.out.println("Horizontally aligned");
                //If player is above
                if(playery<ownery){
                    System.out.println("Above");
                    //Check if there's anything between
                    numberOfItemsBetween = (room.getObjectsInRect(ownerx, playery, owner.getWidth(), playery-ownery)).size();
                    if(numberOfItemsBetween<=2){
                        System.out.println("Is seen");
                        return true;
                    }
                }
                //If player is below
                else if(playery>=ownery){
                    System.out.println("Below");
                    //Check if there's anything between
                    numberOfItemsBetween = (room.getObjectsInRect(ownerx, ownery+owner.getHeight(), owner.getWidth(), playery-ownery)).size();
                    ArrayList<GameObject> stuff = (room.getObjectsInRect(ownerx, ownery+owner.getHeight(), owner.getWidth(), playery-ownery));
                    
                        System.out.println(stuff);
                    System.out.println("#itemsbetween: " + numberOfItemsBetween);
                    if(numberOfItemsBetween<1){
                        System.out.println("Is seen");
                        return true;
                    }                    
                }
            }
            //If vertically aligned
            else{
                System.out.println("Vertically aligned");
                //If player is left
                if(playerx<ownerx){
                    System.out.println("Left");
                    numberOfItemsBetween = (room.getObjectsInRect(playerx, ownery, ownerx-playerx, owner.getHeight())).size();
                    if(numberOfItemsBetween<=2){
                        System.out.println("Is seen");
                        return true;
                    }
                }
                else if(playerx>=ownerx){
                    System.out.println("Right");
                    numberOfItemsBetween = (room.getObjectsInRect(ownerx, ownery, playerx-ownerx, owner.getHeight())).size();
                    if(numberOfItemsBetween<=2){
                        System.out.println("Is seen");
                        return true;
                    }
                }
            }
        }
        return false;
    }
}