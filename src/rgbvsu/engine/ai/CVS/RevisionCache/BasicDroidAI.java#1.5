package rgbvsu.engine.ai;

import java.util.ArrayList;
import java.util.Random;
import rgbvsu.engine.Room;
import rgbvsu.engine.World;
import rgbvsu.engine.objects.BasicDroid;
import rgbvsu.engine.objects.Block;
import rgbvsu.engine.objects.GameObject;
import rgbvsu.engine.objects.Player;

public class BasicDroidAI extends AI {

    private int AItime = 100;
    private int state = 0;
    private int speed = 1;
    private int destinationX = (int) getGameObject().getX();
    private int destinationY = (int) getGameObject().getY();
    private Random generator = new Random();

    public BasicDroidAI(BasicDroid droid) {
        super(droid);
        droid.setAI(this);
    }

    @Override
    public void collisionResponse(GameObject otherobj) {
         if(otherobj instanceof Block || otherobj instanceof Player){
            //System.out.println("I revert!");
            
            revertTick(); 
            AITick();
         }
    }

    @Override
    public void update(long time) {
        GameObject owner = getGameObject();
        World world = owner.getWorld();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        if(destinationX<0){
            destinationX=0;
        }
        if(destinationX>world.getWidth()-owner.getWidth()){
            destinationX = (int) (world.getWidth()-owner.getWidth());
        }
        if(destinationY<0){
            destinationY = 0;
        }
        if(destinationY>world.getHeight()-owner.getHeight()){
            destinationY = (int) (world.getHeight()-owner.getHeight());
        }
        if (owner.getX() == destinationX && owner.getY() == destinationY) {
            AITick();
        }

        if((int)ownerx!=destinationX){
            owner.setX(ownerx + (Math.signum(destinationX - ownerx)));
        }
        if((int)ownery!=destinationY){
            owner.setY(ownery + (Math.signum( destinationY-ownery)));
        }
    }

    private void AITick() {
        //System.out.println("AI-tick!");
        GameObject owner = getGameObject();
        GameObject player = owner.getWorld().getPlayer();
        int playerx = (int) player.getX();
        int playery = (int) player.getY();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();


        //Choose state
        if (owner.inAxisView(player)) {
            state = 1; //Seen
        } else {
            state = 0;
        }

        if (state == 0) { //Walk aimlessly
            
            ArrayList<Integer> freedirs = checkFreeDirections();

            //Choose a direction
            int randomIndex = generator.nextInt(4);
            if (randomIndex == 0 && freedirs.contains(1)) {//LEFT                        
                destinationX -= owner.getWorld().getCellWidth();
                owner.setFacing(1, 0);
                if (destinationX < 0) {
                    destinationX = 0;
                }
            } else if (randomIndex == 1 && freedirs.contains(2)) {//Up
                destinationY -= owner.getWorld().getCellHeight();
                owner.setFacing(0,0);
                if (destinationY < 0) {
                    destinationY = 0;
                }
            } else if (randomIndex == 2 && freedirs.contains(3)) {//RIGHT
                //System.out.println("RIGHT");
                destinationX += owner.getWorld().getCellWidth();
                owner.setFacing(1,1);
                if (destinationX > owner.getWorld().getWidth()) {
                    destinationX = owner.getWorld().getWidth();
                }
            } else if (randomIndex == 3 && freedirs.contains(4)){//DOWN
                destinationY += owner.getWorld().getCellHeight();
                owner.setFacing(0,1);
                if (destinationY > owner.getWorld().getHeight()) {
                    destinationY = owner.getWorld().getHeight();
                }
            }

        } else {  //CHASE 
            //System.out.println("CHASE");
            if(playerx<ownerx){
                destinationX -=owner.getWorld().getCellWidth();
                owner.setFacing(1, 0);
            }
            else if(playerx>ownerx){
                destinationX +=owner.getWorld().getCellWidth();
                owner.setFacing(1,1);
            }
            if(playery<ownery){
                destinationY -= owner.getWorld().getCellHeight();
                owner.setFacing(0,0);
            }
            else if(playery>ownery){
                destinationY += owner.getWorld().getCellHeight();
                owner.setFacing(0,1);
            }
        }

    }

    private void revertTick() {
        GameObject owner = getGameObject();
        int ownerx = (int) owner.getX();
        int ownery = (int) owner.getY();
        if(ownerx<destinationX){
            owner.setX(ownerx-1);
        }
        else if(ownerx>destinationX){
            owner.setX(ownerx+1);
        }
        if(ownery>destinationY){
            owner.setY(ownery+1);
        }
        else if(ownery<destinationY){
            owner.setY(ownery-1);
        }
        
    }
    
    private ArrayList<Integer> checkFreeDirections(){
        GameObject owner = getGameObject();
        Room room = owner.getWorld().getCurrentRoom();
        ArrayList<Integer> freedirs = new ArrayList<Integer>();
        //left
        if(room.getObjectsAt(owner.getX()-1, owner.getY(), null).isEmpty()){
            freedirs.add(1);
        }
        //up
        if(room.getObjectsAt(owner.getX(), owner.getY()-1, null).isEmpty()){
            freedirs.add(2);
        }
        //right
        if(room.getObjectsAt(owner.getX()+owner.getWidth()+1, owner.getY(), null).isEmpty()){
            freedirs.add(3);
        }
        //down
        if(room.getObjectsAt(owner.getX(), owner.getY()+owner.getHeight()+1, null).isEmpty()){
            freedirs.add(4);
        }
        //System.out.println(freedirs);
        return freedirs;
    }
}